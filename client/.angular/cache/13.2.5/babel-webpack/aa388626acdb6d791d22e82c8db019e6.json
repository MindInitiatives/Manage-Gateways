{"ast":null,"code":"import _asyncToGenerator from \"/Users/stephenoloto/Desktop/Manage Gateways/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { BaseUrl } from '../baseurl';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GatewayService extends BaseUrl {\n  constructor(http) {\n    super();\n    this.http = http;\n  }\n\n  createGateway(data) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    console.log(headers);\n    return this.http.post(this.BASE_URL, data, {\n      headers\n    }).pipe(map(response => {\n      return response;\n    }));\n  }\n\n  getAllGateways() {\n    return this.http.get(this.BASE_URL, {\n      headers: new HttpHeaders({\n        'content-type': 'application/json'\n      })\n    });\n  }\n\n  getGatewayById(id) {\n    return this.http.get(this.BASE_URL + '/gateway?id=' + id, {\n      headers: new HttpHeaders({\n        'content-type': 'application/json'\n      })\n    });\n  }\n\n  updateGateway(gatewayData, id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.put(`${this.BASE_URL}/gateway?id=${id}`, gatewayData, {\n      headers\n    }).pipe(tap(updatedGatewayDetail => console.log(`updated gateway detail = ${JSON.stringify(updatedGatewayDetail)}`)), catchError( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (error) {\n        return console.log(error);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()));\n  }\n\n  deleteGateway(id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    console.log(headers);\n    return this.http.delete(`${this.BASE_URL}/gateway?id=${id}`, {\n      headers\n    });\n  }\n\n  deleteGatewayDevice(id, deviceId) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    console.log(headers);\n    return this.http.delete(`${this.BASE_URL}/gateway?gatewayId=${id}&deviceId=${deviceId}`, {\n      headers\n    });\n  }\n\n}\n\nGatewayService.ɵfac = function GatewayService_Factory(t) {\n  return new (t || GatewayService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nGatewayService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GatewayService,\n  factory: GatewayService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/stephenoloto/Desktop/Manage Gateways/client/src/app/services/gateway.service.ts"],"names":["HttpHeaders","catchError","map","tap","BaseUrl","i0","i1","GatewayService","constructor","http","createGateway","data","headers","console","log","post","BASE_URL","pipe","response","getAllGateways","get","getGatewayById","id","updateGateway","gatewayData","put","updatedGatewayDetail","JSON","stringify","error","deleteGateway","delete","deleteGatewayDevice","deviceId","ɵfac","GatewayService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { BaseUrl } from '../baseurl';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GatewayService extends BaseUrl {\n    constructor(http) {\n        super();\n        this.http = http;\n    }\n    createGateway(data) {\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n        console.log(headers);\n        return this.http\n            .post(this.BASE_URL, data, {\n            headers,\n        })\n            .pipe(map((response) => {\n            return response;\n        }));\n    }\n    getAllGateways() {\n        return this.http.get(this.BASE_URL, {\n            headers: new HttpHeaders({\n                'content-type': 'application/json'\n            }),\n        });\n    }\n    getGatewayById(id) {\n        return this.http.get(this.BASE_URL + '/gateway?id=' + id, {\n            headers: new HttpHeaders({\n                'content-type': 'application/json'\n            }),\n        });\n    }\n    updateGateway(gatewayData, id) {\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n        return this.http\n            .put(`${this.BASE_URL}/gateway?id=${id}`, gatewayData, { headers })\n            .pipe(tap((updatedGatewayDetail) => console.log(`updated gateway detail = ${JSON.stringify(updatedGatewayDetail)}`)), catchError(async (error) => console.log(error)));\n    }\n    deleteGateway(id) {\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n        console.log(headers);\n        return this.http.delete(`${this.BASE_URL}/gateway?id=${id}`, { headers });\n    }\n    deleteGatewayDevice(id, deviceId) {\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n        console.log(headers);\n        return this.http.delete(`${this.BASE_URL}/gateway?gatewayId=${id}&deviceId=${deviceId}`, { headers });\n    }\n}\nGatewayService.ɵfac = function GatewayService_Factory(t) { return new (t || GatewayService)(i0.ɵɵinject(i1.HttpClient)); };\nGatewayService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: GatewayService, factory: GatewayService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}